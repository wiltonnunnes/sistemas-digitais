library ieee;
use ieee.std_logic_1164.all;

entity mde_b is
	port (
		clk, instruction : in std_logic;
		d, tot_ld, tot_clr : out std_logic
	);
end mde_b;

architecture ckt of mde_b is
	type state_type is (i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, 
	i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, 
	i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59, 
	i60, i61, i62, i63, i64, i65, i66, i67, i68, i69, i70, i71, i72, i73, i74, i75, i76, i77, i78, i79, 
	i80, i81, i82, i83, i84, i85, i86, i87, i88, i89, i90, i91, i92, i93, i94, i95, i96, i97);
	signal y_present, y_next : state_type;
begin
	process (c, tot_lt_s, reset, y_present)
	begin
		case y_present is
			when start =>
				y_next <= wait_state;
			when wait_state =>
				if c = '0' then
					y_next <= add;
				elsif tot_lt_s = '0' then
					y_next <= stop;
				else
					y_next <= wait_state;
				end if;
			when add =>
				y_next <= wait_state;
			when stop =>
				y_next <= stop;
		end case;
	end process;
	process (clk)
	begin
		if reset = '0' then
			y_present <= start;
		elsif (clk'event and clk = '1') then
			y_present <= y_next;
		end if;
	end process;
	d <= '1' when y_present = stop else '0';
	tot_ld <= '1' when y_present = add else '0';
	tot_clr <= '0' when y_present = start else '1';
end ckt;